package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"
	"graphql-hasura-demo/graph/model"
	"graphql-hasura-demo/internal/database"
	"strconv"
)

// AddStudent is the resolver for the addStudent field.
func (r *mutationResolver) AddStudent(ctx context.Context, input model.NewStudentInput) (*model.Student, error) {
	student := database.Student{
		StudentID:   input.StudentID,
		Name:        input.Name,
		DateOfBirth: input.DateOfBirth,
		Gender:      string(input.Gender),
		Class:       input.Class,
	}
	createdStudent, err := student.CreateStudent()
	if err != nil {
		return nil, err
	}
	return &model.Student{
		ID:          strconv.FormatInt(int64(createdStudent.ID), 10),
		StudentID:   createdStudent.StudentID,
		Name:        createdStudent.Name,
		DateOfBirth: createdStudent.DateOfBirth,
		Gender:      model.Gender(createdStudent.Gender),
		Class:       createdStudent.Class}, nil
}

// UpdateStudent is the resolver for the updateStudent field.
func (r *mutationResolver) UpdateStudent(ctx context.Context, id string, input model.UpdateStudentInput) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: UpdateStudent - updateStudent"))
}

// DeleteStudent is the resolver for the deleteStudent field.
func (r *mutationResolver) DeleteStudent(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteStudent - deleteStudent"))
}

// AddSubject is the resolver for the addSubject field.
func (r *mutationResolver) AddSubject(ctx context.Context, input model.NewSubjectInput) (*model.Subject, error) {
	subject := database.Subject{
		SubjectID: input.SubjectID,
		Name:      input.Name,
	}

	createdSubject, err := subject.CreateSubject()
	if err != nil {
		return nil, fmt.Errorf("failed to create subject: %w", err)
	}
	return &model.Subject{
		ID:        strconv.FormatUint(uint64(createdSubject.ID), 10),
		SubjectID: createdSubject.SubjectID,
		Name:      createdSubject.Name,
	}, nil

}

// UpdateSubject is the resolver for the updateSubject field.
func (r *mutationResolver) UpdateSubject(ctx context.Context, id string, input model.UpdateSubjectInput) (*model.Subject, error) {
	panic(fmt.Errorf("not implemented: UpdateSubject - updateSubject"))
}

// DeleteSubject is the resolver for the deleteSubject field.
func (r *mutationResolver) DeleteSubject(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteSubject - deleteSubject"))
}

// AddGrade is the resolver for the addGrade field.
func (r *mutationResolver) AddGrade(ctx context.Context, input model.NewGradeInput) (*model.Grade, error) {
	panic(fmt.Errorf("not implemented: AddGrade - addGrade"))
}

// UpdateGrade is the resolver for the updateGrade field.
func (r *mutationResolver) UpdateGrade(ctx context.Context, id string, input model.UpdateGradeInput) (*model.Grade, error) {
	panic(fmt.Errorf("not implemented: UpdateGrade - updateGrade"))
}

// DeleteGrade is the resolver for the deleteGrade field.
func (r *mutationResolver) DeleteGrade(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteGrade - deleteGrade"))
}

// Students is the resolver for the students field.
func (r *queryResolver) Students(ctx context.Context) ([]*model.Student, error) {
	students, err := database.GetAllStudents()
	if err != nil {
		return nil, fmt.Errorf("failed to fetch students: %w", err)
	}
	var result []*model.Student
	for _, s := range students {
		result = append(result, &model.Student{
			ID:          strconv.FormatUint(uint64(s.ID), 10),
			StudentID:   s.StudentID,
			Name:        s.Name,
			DateOfBirth: s.DateOfBirth,
			Gender:      model.Gender(s.Gender),
			Class:       s.Class,
		})
	}

	return result, nil
}

// Student is the resolver for the student field.
func (r *queryResolver) Student(ctx context.Context, id string) (*model.Student, error) {
	uid, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		return nil, err
	}

	student, err := database.GetStudentByID(uint(uid))
	if err != nil {
		return nil, fmt.Errorf("failed to fetch student: %w", err)
	}
	return &model.Student{
		ID:          strconv.FormatUint(uint64(student.ID), 10),
		StudentID:   student.StudentID,
		Name:        student.Name,
		DateOfBirth: student.DateOfBirth,
		Gender:      model.Gender(student.Gender),
		Class:       student.Class}, nil
}

// SearchStudents is the resolver for the searchStudents field.
func (r *queryResolver) SearchStudents(ctx context.Context, field string, value string) ([]*model.Student, error) {
	students, err := database.SearchStudentByField(field, value)
	if err != nil {
		return nil, err
	}

	// Convert models.Student to model.Student (nếu khác struct)
	var result []*model.Student
	for _, s := range students {
		result = append(result, &model.Student{
			ID:          strconv.FormatInt(int64(s.ID), 10),
			StudentID:   s.StudentID,
			Name:        s.Name,
			DateOfBirth: s.DateOfBirth,
			Gender:      model.Gender(s.Gender),
			Class:       s.Class,
		})
	}
	return result, nil
}

// Subjects is the resolver for the subjects field.
func (r *queryResolver) Subjects(ctx context.Context) ([]*model.Subject, error) {
	subjects, err := database.GetAllSubjects()
	if err != nil {
		return nil, fmt.Errorf("failed to fetch subjects: %w", err)
	}
	var result []*model.Subject
	for _, s := range subjects {
		result = append(result, &model.Subject{
			ID:        strconv.FormatUint(uint64(s.ID), 10),
			SubjectID: s.SubjectID,
			Name:      s.Name,
		})
	}

	return result, nil

}

// Subject is the resolver for the subject field.
func (r *queryResolver) Subject(ctx context.Context, id string) (*model.Subject, error) {
	panic(fmt.Errorf("not implemented: Subject - subject"))
}

// Grades is the resolver for the grades field.
func (r *queryResolver) Grades(ctx context.Context) ([]*model.Grade, error) {
	panic(fmt.Errorf("not implemented: Grades - grades"))
}

// GradesByStudent is the resolver for the gradesByStudent field.
func (r *queryResolver) GradesByStudent(ctx context.Context, studentID string) ([]*model.Grade, error) {
	panic(fmt.Errorf("not implemented: GradesByStudent - gradesByStudent"))
}

// ReportCard is the resolver for the reportCard field.
func (r *queryResolver) ReportCard(ctx context.Context, studentID string) ([]*model.Grade, error) {
	panic(fmt.Errorf("not implemented: ReportCard - reportCard"))
}

// StudentsByClass is the resolver for the studentsByClass field.
func (r *queryResolver) StudentsByClass(ctx context.Context, class string) ([]*model.Student, error) {
	panic(fmt.Errorf("not implemented: StudentsByClass - studentsByClass"))
}

// StudentsByPerformance is the resolver for the studentsByPerformance field.
func (r *queryResolver) StudentsByPerformance(ctx context.Context, performance model.AcademicPerformance) ([]*model.Student, error) {
	panic(fmt.Errorf("not implemented: StudentsByPerformance - studentsByPerformance"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *queryResolver) StudentSearch(ctx context.Context, keyword string) ([]*model.Student, error) {
	panic(fmt.Errorf("not implemented: StudentSearch - studentSearch"))
}
*/
