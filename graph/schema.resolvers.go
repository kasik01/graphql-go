package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"graphql-hasura-demo/graph/model"
	"graphql-hasura-demo/internal/database"
	"strconv"

	"github.com/xuri/excelize/v2"
)

// AddStudent is the resolver for the addStudent field.
func (r *mutationResolver) AddStudent(ctx context.Context, input model.NewStudentInput) (*model.Student, error) {
	student := database.Student{
		StudentID:   input.StudentID,
		Name:        input.Name,
		DateOfBirth: input.DateOfBirth,
		Gender:      string(input.Gender),
		Class:       input.Class,
	}
	createdStudent, err := student.CreateStudent()
	if err != nil {
		return nil, err
	}
	return &model.Student{
		ID:          strconv.FormatInt(int64(createdStudent.ID), 10),
		StudentID:   createdStudent.StudentID,
		Name:        createdStudent.Name,
		DateOfBirth: createdStudent.DateOfBirth,
		Gender:      model.Gender(createdStudent.Gender),
		Class:       createdStudent.Class}, nil
}

// UpdateStudent is the resolver for the updateStudent field.
func (r *mutationResolver) UpdateStudent(ctx context.Context, id string, input model.UpdateStudentInput) (*model.Student, error) {
	uintId64, err := strconv.ParseInt(id, 10, 32)
	if err != nil {
		return nil, fmt.Errorf(" invalide user id")
	}

	updateStudent := database.Student{
		StudentID:   *input.StudentID,
		Name:        *input.Name,
		DateOfBirth: *input.DateOfBirth,
		Gender:      string(*input.Gender),
		Class:       *input.Class,
	}

	updatedStudent, err := updateStudent.UpdateStudent(uint(uintId64))
	if err != nil {
		return nil, err
	}

	return &model.Student{
		ID:          id,
		StudentID:   updatedStudent.StudentID,
		Name:        updatedStudent.Name,
		DateOfBirth: updateStudent.DateOfBirth,
		Gender:      model.Gender(updatedStudent.Gender),
		Class:       updateStudent.Class,
	}, nil
}

// DeleteStudent is the resolver for the deleteStudent field.
func (r *mutationResolver) DeleteStudent(ctx context.Context, id string) (*model.BaseResponseView, error) {
	uintId64, err := strconv.ParseInt(id, 10, 32)
	if err != nil {
		return nil, fmt.Errorf(" invalide user id")
	}

	var student database.Student
	isSuccess, err := student.DeleteStudent(uint(uintId64))

	if err != nil {
		return &model.BaseResponseView{
			Success: isSuccess,
			Message: fmt.Sprintf("Deleted fail student with ID %s: %v", id, err),
			Data:    nil,
		}, nil
	}
	message := fmt.Sprintf("Student with ID: %s deleted successfully", id)
	if !isSuccess {
		message = fmt.Sprintf("No student found with ID: %s", id)
	}

	return &model.BaseResponseView{
		Success: isSuccess,
		Message: message,
		Data:    nil,
	}, nil
}

// AddSubject is the resolver for the addSubject field.
func (r *mutationResolver) AddSubject(ctx context.Context, input model.NewSubjectInput) (*model.Subject, error) {
	subject := database.Subject{
		SubjectID: input.SubjectID,
		Name:      input.Name,
	}

	createdSubject, err := subject.CreateSubject()
	if err != nil {
		return nil, fmt.Errorf("failed to create subject: %w", err)
	}
	return &model.Subject{
		ID:        strconv.FormatUint(uint64(createdSubject.ID), 10),
		SubjectID: createdSubject.SubjectID,
		Name:      createdSubject.Name,
	}, nil
}

// UpdateSubject is the resolver for the updateSubject field.
func (r *mutationResolver) UpdateSubject(ctx context.Context, id string, input model.UpdateSubjectInput) (*model.Subject, error) {
	updateSubject := database.Subject{
		SubjectID: *input.SubjectID,
		Name:      *input.Name,
	}

	updatedSubject, err := updateSubject.UpdateSubject(id)

	if err != nil {
		return nil, err
	}

	return &model.Subject{
		ID:        id,
		SubjectID: updatedSubject.SubjectID,
		Name:      updatedSubject.Name,
	}, nil
}

// DeleteSubject is the resolver for the deleteSubject field.
func (r *mutationResolver) DeleteSubject(ctx context.Context, id string) (*model.BaseResponseView, error) {
	var subject database.Subject
	isSuccess, err := subject.DeleteSubject(id)

	if err != nil {
		return &model.BaseResponseView{
			Success: isSuccess,
			Message: fmt.Sprintf("Deleted fail subject with ID %s: %v", id, err),
		}, nil
	}
	message := fmt.Sprintf("Subject with ID: %s deleted successfully", id)
	if !isSuccess {
		message = fmt.Sprintf("No subject found with ID: %s", id)
	}

	return &model.BaseResponseView{
		Success: isSuccess,
		Message: message,
	}, nil
}

// AddGrade is the resolver for the addGrade field.
func (r *mutationResolver) AddGrade(ctx context.Context, input model.NewGradeInput) (*model.Grade, error) {
	if input.StudentID == "" || input.SubjectID == "" || input.Score < 0 || input.Score > 100 {
		return nil, errors.New("input invalid")
	}
	studentID, err := strconv.ParseUint(input.StudentID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("studentID không hợp lệ: %v", err)
	}
	subjectID, err := strconv.ParseUint(input.SubjectID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("subjectID không hợp lệ: %v", err)
	}

	if !input.GradeType.IsValid() {
		return nil, errors.New("invalid grade")
	}

	newGrade := database.Grade{
		StudentID: uint(studentID),
		SubjectID: uint(subjectID),
		GradeType: string(input.GradeType),
		Score:     input.Score,
	}

	createdGrade, err := newGrade.CreateGrade()
	if err != nil {
		return nil, fmt.Errorf("create grade failed %v", err)
	}

	student, _ := database.GetStudentByID(createdGrade.StudentID)
	// if err != nil {
	// 	return nil, fmt.Errorf("not found student: %v", err)
	// }
	subject, _ := database.GetSubjectByID(createdGrade.SubjectID)
	// if err != nil {
	// 	return nil, fmt.Errorf("not found subject: %v", err)
	// }
	return &model.Grade{
		ID: strconv.FormatUint(uint64(createdGrade.ID), 10),
		Student: &model.Student{
			ID:        strconv.FormatUint(uint64(studentID), 10),
			StudentID: student.StudentID,
			Name:      student.Name,
		},
		Subject: &model.Subject{
			ID:        strconv.FormatUint(uint64(subjectID), 10),
			SubjectID: subject.SubjectID,
			Name:      subject.Name,
		},
		GradeType: model.GradeType(createdGrade.GradeType),
		Score:     createdGrade.Score,
	}, nil
}

// UpdateGrade is the resolver for the updateGrade field.
func (r *mutationResolver) UpdateGrade(ctx context.Context, id string, input model.UpdateGradeInput) (*model.Grade, error) {
	panic(fmt.Errorf("not implemented: UpdateGrade - updateGrade"))
}

// DeleteGrade is the resolver for the deleteGrade field.
func (r *mutationResolver) DeleteGrade(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteGrade - deleteGrade"))
}

// Students is the resolver for the students field.
func (r *queryResolver) Students(ctx context.Context) ([]*model.Student, error) {
	students, err := database.GetAllStudents()
	if err != nil {
		return nil, fmt.Errorf("failed to fetch students: %w", err)
	}
	var result []*model.Student
	for _, s := range students {
		result = append(result, &model.Student{
			ID:          strconv.FormatUint(uint64(s.ID), 10),
			StudentID:   s.StudentID,
			Name:        s.Name,
			DateOfBirth: s.DateOfBirth,
			Gender:      model.Gender(s.Gender),
			Class:       s.Class,
		})
	}

	return result, nil
}

// Student is the resolver for the student field.
func (r *queryResolver) Student(ctx context.Context, id string) (*model.Student, error) {
	uid, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		return nil, err
	}

	student, err := database.GetStudentByID(uint(uid))
	if err != nil {
		return nil, fmt.Errorf("failed to fetch student: %w", err)
	}
	return database.BuildStudentModel(*student)
}

// SearchStudents is the resolver for the searchStudents field.
func (r *queryResolver) SearchStudents(ctx context.Context, field string, value string) ([]*model.Student, error) {
	students, err := database.SearchStudentByField(field, value)
	if err != nil {
		return nil, err
	}

	// Convert models.Student to model.Student (nếu khác struct)
	var result []*model.Student
	for _, s := range students {
		result = append(result, &model.Student{
			ID:          strconv.FormatInt(int64(s.ID), 10),
			StudentID:   s.StudentID,
			Name:        s.Name,
			DateOfBirth: s.DateOfBirth,
			Gender:      model.Gender(s.Gender),
			Class:       s.Class,
		})
	}
	return result, nil
}

// Subjects is the resolver for the subjects field.
func (r *queryResolver) Subjects(ctx context.Context) ([]*model.Subject, error) {
	subjects, err := database.GetAllSubjects()
	if err != nil {
		return nil, fmt.Errorf("failed to fetch subjects: %w", err)
	}
	var result []*model.Subject
	for _, s := range subjects {
		result = append(result, &model.Subject{
			ID:        strconv.FormatUint(uint64(s.ID), 10),
			SubjectID: s.SubjectID,
			Name:      s.Name,
		})
	}

	return result, nil
}

// Subject is the resolver for the subject field.
func (r *queryResolver) Subject(ctx context.Context, id string) (*model.Subject, error) {
	uid, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		return nil, err
	}

	subject, err := database.GetSubjectByID(uint(uid))

	if err != nil {
		return nil, err
	}

	return &model.Subject{
		ID:        strconv.FormatUint(uint64(subject.ID), 10),
		SubjectID: subject.SubjectID,
		Name:      subject.Name,
	}, nil
}

// Grades is the resolver for the grades field.
func (r *queryResolver) Grades(ctx context.Context) ([]*model.Grade, error) {
	panic(fmt.Errorf("not implemented: Grades - grades"))
}

// GradesByStudent is the resolver for the gradesByStudent field.
func (r *queryResolver) GradesByStudent(ctx context.Context, studentID string) ([]*model.Grade, error) {
	parsedUint64, err := strconv.ParseUint(studentID, 10, 32)
	if err != nil {
		return nil, fmt.Errorf("ID học sinh không hợp lệ: %v", err)
	}
	uintID := uint(parsedUint64)

	// Gọi hàm ReportCard để lấy điểm
	var g database.Grade
	grades, err := g.GetGradesByStudent(uintID)
	if err != nil {
		return nil, fmt.Errorf("lấy danh sách điểm thất bại: %v", err)
	}

	var result []*model.Grade
	for _, grade := range grades {
		result = append(result, &model.Grade{
			ID: strconv.FormatUint(uint64(grade.ID), 10),
			Student: &model.Student{
				ID:   strconv.FormatUint(uint64(grade.Student.ID), 10),
				Name: grade.Student.Name,
			},
			Subject: &model.Subject{
				ID:   strconv.FormatUint(uint64(grade.Subject.ID), 10),
				Name: grade.Subject.Name,
			},
			GradeType: model.GradeType(grade.GradeType),
			Score:     grade.Score,
		})
	}

	return result, nil
}

// StudentsByPerformance is the resolver for the studentsByPerformance field.
func (r *queryResolver) StudentsByPerformance(ctx context.Context, performance model.AcademicPerformance) ([]*model.Student, error) {
	students, err := database.GetAllStudents()
	if err != nil {
		return nil, fmt.Errorf("failed to fetch students: %w", err)
	}

	if len(students) == 0 {
		return []*model.Student{}, nil
	}

	result := make([]*model.Student, 0)
	for _, student := range students {
		modelStudent, err := database.BuildStudentModel(student)
		if err != nil {
			return nil, fmt.Errorf("failed get students: %w", err)
		}
		if modelStudent.AcademicPerformance == performance {
			result = append(result, modelStudent)
		}
	}
	return result, nil
}

// ExportStudentsByClass is the resolver for the ExportStudentsByClass field.
func (r *queryResolver) ExportStudentsByClass(ctx context.Context, class string) (*model.BaseResponseView, error) {
	// Lấy học sinh theo lớp
	db := database.GetDB()
	if db == nil {
		return &model.BaseResponseView{
			Success: false,
			Message: "database instance không được khởi tạo",
		}, nil
	}

	var students []database.Student
	if err := db.Where("class = ?", class).Find(&students).Error; err != nil {
		return &model.BaseResponseView{
			Success: false,
			Message: fmt.Sprintf("lấy học sinh theo lớp %s thất bại: %v", class, err),
		}, nil
	}

	if len(students) == 0 {
		return &model.BaseResponseView{
			Success: true,
			Message: fmt.Sprintf("không có học sinh trong lớp %s", class),
		}, nil
	}

	// Lấy danh sách môn học
	var subjects []database.Subject
	if err := db.Find(&subjects).Error; err != nil {
		return &model.BaseResponseView{
			Success: false,
			Message: fmt.Sprintf("lấy danh sách môn học thất bại: %v", err),
		}, nil
	}

	// Tạo file Excel
	f := excelize.NewFile()
	defer func() {
		if err := f.Close(); err != nil {
			fmt.Println(err)
		}
	}()
	sheet := "Sheet1"

	// Thiết lập tiêu đề
	headers := []string{"Mã học sinh", "Tên", "Ngày sinh", "Giới tính", "Lớp", "Điểm trung bình", "Học lực"}
	for i, header := range headers {
		col := string(rune('A'+i)) + "1"
		if err := f.SetCellValue(sheet, col, header); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("thiết lập tiêu đề thất bại: %v", err),
			}, nil
		}
	}

	// Thêm tiêu đề môn học
	for i, subject := range subjects {
		col := string(rune('H'+i)) + "1"
		if err := f.SetCellValue(sheet, col, subject.Name); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("thiết lập tiêu đề môn %s thất bại: %v", subject.Name, err),
			}, nil
		}
	}

	// Điền dữ liệu học sinh
	modelStudents := make([]*model.Student, 0, len(students))
	for _, student := range students {
		modelStudent, err := database.BuildStudentModel(student)
		if err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("xử lý học sinh %d thất bại: %v", student.ID, err),
			}, nil
		}
		modelStudents = append(modelStudents, modelStudent)
	}

	for i, student := range modelStudents {
		row := i + 2
		if err := f.SetCellValue(sheet, fmt.Sprintf("A%d", row), student.StudentID); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("ghi dữ liệu học sinh %s thất bại: %v", student.StudentID, err),
			}, nil
		}
		if err := f.SetCellValue(sheet, fmt.Sprintf("B%d", row), student.Name); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("ghi dữ liệu học sinh %s thất bại: %v", student.StudentID, err),
			}, nil
		}
		if err := f.SetCellValue(sheet, fmt.Sprintf("C%d", row), student.DateOfBirth); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("ghi dữ liệu học sinh %s thất bại: %v", student.StudentID, err),
			}, nil
		}
		if err := f.SetCellValue(sheet, fmt.Sprintf("D%d", row), student.Gender); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("ghi dữ liệu học sinh %s thất bại: %v", student.StudentID, err),
			}, nil
		}
		if err := f.SetCellValue(sheet, fmt.Sprintf("E%d", row), student.Class); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("ghi dữ liệu học sinh %s thất bại: %v", student.StudentID, err),
			}, nil
		}
		if err := f.SetCellValue(sheet, fmt.Sprintf("F%d", row), student.OverallAverage); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("ghi dữ liệu học sinh %s thất bại: %v", student.StudentID, err),
			}, nil
		}
		if err := f.SetCellValue(sheet, fmt.Sprintf("G%d", row), student.AcademicPerformance); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("ghi dữ liệu học sinh %s thất bại: %v", student.StudentID, err),
			}, nil
		}

		// Ghi điểm trung bình môn
		for j, avg := range student.SubjectAverages {
			col := string(rune('H' + j))
			if err := f.SetCellValue(sheet, fmt.Sprintf("%s%d", col, row), avg.AverageScore); err != nil {
				return &model.BaseResponseView{
					Success: false,
					Message: fmt.Sprintf("ghi điểm môn cho học sinh %s thất bại: %v", student.StudentID, err),
				}, nil
			}
		}
	}

	// Lưu file Excel vào buffer
	buffer, err := f.WriteToBuffer()
	if err != nil {
		return &model.BaseResponseView{
			Success: false,
			Message: fmt.Sprintf("tạo file Excel thất bại: %v", err),
		}, nil
	}

	// Chuyển sang base64
	base64Data := base64.StdEncoding.EncodeToString(buffer.Bytes())

	// filename := fmt.Sprintf("students_%s_%d.xlsx", class, time.Now().UnixNano())
	// filePath := filepath.Join("/tmp", filename)

	// // Lưu file Excel
	// if err := f.SaveAs(filePath); err != nil {
	// 	return &model.BaseResponseView{
	// 		Success: false,
	// 		Message: fmt.Sprintf("lưu file Excel thất bại: %v", err),
	// 	}, nil
	// }

	// // Tạo URL download
	// downloadURL := fmt.Sprintf("http://localhost:8084/download/%s", filename)

	return &model.BaseResponseView{
		Success: true,
		Message: fmt.Sprintf("Xuất Excel thành công cho lớp %s", class),
		Data:    &base64Data,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) ExportStudentsByClass(ctx context.Context, class string) (*model.BaseResponseView, error) {
	// Lấy học sinh theo lớp
	db := database.GetDB()
	if db == nil {
		return &model.BaseResponseView{
			Success: false,
			Message: "database instance không được khởi tạo",
		}, nil
	}

	var students []database.Student
	if err := db.Where("class = ?", class).Find(&students).Error; err != nil {
		return &model.BaseResponseView{
			Success: false,
			Message: fmt.Sprintf("lấy học sinh theo lớp %s thất bại: %v", class, err),
		}, nil
	}

	if len(students) == 0 {
		return &model.BaseResponseView{
			Success: true,
			Message: fmt.Sprintf("không có học sinh trong lớp %s", class),
		}, nil
	}

	// Lấy danh sách môn học
	var subjects []database.Subject
	if err := db.Find(&subjects).Error; err != nil {
		return &model.BaseResponseView{
			Success: false,
			Message: fmt.Sprintf("lấy danh sách môn học thất bại: %v", err),
		}, nil
	}

	// Tạo file Excel
	f := excelize.NewFile()
	defer func() {
		if err := f.Close(); err != nil {
			fmt.Println(err)
		}
	}()
	sheet := "Sheet1"

	// Thiết lập tiêu đề
	headers := []string{"Mã học sinh", "Tên", "Ngày sinh", "Giới tính", "Lớp", "Điểm trung bình", "Học lực"}
	for i, header := range headers {
		col := string(rune('A'+i)) + "1"
		if err := f.SetCellValue(sheet, col, header); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("thiết lập tiêu đề thất bại: %v", err),
			}, nil
		}
	}

	// Thêm tiêu đề môn học
	for i, subject := range subjects {
		col := string(rune('H'+i)) + "1"
		if err := f.SetCellValue(sheet, col, subject.Name); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("thiết lập tiêu đề môn %s thất bại: %v", subject.Name, err),
			}, nil
		}
	}

	// Điền dữ liệu học sinh
	modelStudents := make([]*model.Student, 0, len(students))
	for _, student := range students {
		modelStudent, err := database.BuildStudentModel(student)
		if err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("xử lý học sinh %d thất bại: %v", student.ID, err),
			}, nil
		}
		modelStudents = append(modelStudents, modelStudent)
	}

	for i, student := range modelStudents {
		row := i + 2
		if err := f.SetCellValue(sheet, fmt.Sprintf("A%d", row), student.StudentID); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("ghi dữ liệu học sinh %s thất bại: %v", student.StudentID, err),
			}, nil
		}
		if err := f.SetCellValue(sheet, fmt.Sprintf("B%d", row), student.Name); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("ghi dữ liệu học sinh %s thất bại: %v", student.StudentID, err),
			}, nil
		}
		if err := f.SetCellValue(sheet, fmt.Sprintf("C%d", row), student.DateOfBirth); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("ghi dữ liệu học sinh %s thất bại: %v", student.StudentID, err),
			}, nil
		}
		if err := f.SetCellValue(sheet, fmt.Sprintf("D%d", row), student.Gender); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("ghi dữ liệu học sinh %s thất bại: %v", student.StudentID, err),
			}, nil
		}
		if err := f.SetCellValue(sheet, fmt.Sprintf("E%d", row), student.Class); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("ghi dữ liệu học sinh %s thất bại: %v", student.StudentID, err),
			}, nil
		}
		if err := f.SetCellValue(sheet, fmt.Sprintf("F%d", row), student.OverallAverage); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("ghi dữ liệu học sinh %s thất bại: %v", student.StudentID, err),
			}, nil
		}
		if err := f.SetCellValue(sheet, fmt.Sprintf("G%d", row), student.AcademicPerformance); err != nil {
			return &model.BaseResponseView{
				Success: false,
				Message: fmt.Sprintf("ghi dữ liệu học sinh %s thất bại: %v", student.StudentID, err),
			}, nil
		}

		// Ghi điểm trung bình môn
		for j, avg := range student.SubjectAverages {
			col := string(rune('H' + j))
			if err := f.SetCellValue(sheet, fmt.Sprintf("%s%d", col, row), avg.AverageScore); err != nil {
				return &model.BaseResponseView{
					Success: false,
					Message: fmt.Sprintf("ghi điểm môn cho học sinh %s thất bại: %v", student.StudentID, err),
				}, nil
			}
		}
	}

	// Lưu file Excel vào buffer
	buffer, err := f.WriteToBuffer()
	if err != nil {
		return &model.BaseResponseView{
			Success: false,
			Message: fmt.Sprintf("tạo file Excel thất bại: %v", err),
		}, nil
	}

	// Chuyển sang base64
	base64Data := base64.StdEncoding.EncodeToString(buffer.Bytes())

	return &model.BaseResponseView{
		Success: true,
		Message: fmt.Sprintf("Xuất Excel thành công cho lớp %s", class),
		Data:    &base64Data,
	}, nil
}
*/
