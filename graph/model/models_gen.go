// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Grade struct {
	ID        string    `json:"id"`
	Student   *Student  `json:"student"`
	Subject   *Subject  `json:"subject"`
	GradeType GradeType `json:"gradeType"`
	Score     float64   `json:"score"`
}

type Mutation struct {
}

type NewGradeInput struct {
	StudentID string    `json:"studentId"`
	SubjectID string    `json:"subjectId"`
	GradeType GradeType `json:"gradeType"`
	Score     float64   `json:"score"`
}

type NewStudentInput struct {
	StudentID   string `json:"studentId"`
	Name        string `json:"name"`
	DateOfBirth string `json:"dateOfBirth"`
	Gender      Gender `json:"gender"`
	Class       string `json:"class"`
}

type NewSubjectInput struct {
	SubjectID string `json:"subjectId"`
	Name      string `json:"name"`
}

type Query struct {
}

type Student struct {
	ID                  string              `json:"id"`
	StudentID           string              `json:"studentId"`
	Name                string              `json:"name"`
	DateOfBirth         string              `json:"dateOfBirth"`
	Gender              Gender              `json:"gender"`
	Class               string              `json:"class"`
	SubjectAverages     []*SubjectAverage   `json:"subjectAverages"`
	OverallAverage      float64             `json:"overallAverage"`
	AcademicPerformance AcademicPerformance `json:"academicPerformance"`
}

type Subject struct {
	ID        string `json:"id"`
	SubjectID string `json:"subjectId"`
	Name      string `json:"name"`
}

type SubjectAverage struct {
	Subject      *Subject `json:"subject"`
	AverageScore float64  `json:"averageScore"`
}

type UpdateGradeInput struct {
	Score float64 `json:"score"`
}

type UpdateStudentInput struct {
	Name        *string `json:"name,omitempty"`
	DateOfBirth *string `json:"dateOfBirth,omitempty"`
	Gender      *Gender `json:"gender,omitempty"`
	Class       *string `json:"class,omitempty"`
}

type UpdateSubjectInput struct {
	Name *string `json:"name,omitempty"`
}

type AcademicPerformance string

const (
	AcademicPerformanceExcellent AcademicPerformance = "EXCELLENT"
	AcademicPerformanceGood      AcademicPerformance = "GOOD"
	AcademicPerformanceAverage   AcademicPerformance = "AVERAGE"
	AcademicPerformanceWeak      AcademicPerformance = "WEAK"
	AcademicPerformancePoor      AcademicPerformance = "POOR"
)

var AllAcademicPerformance = []AcademicPerformance{
	AcademicPerformanceExcellent,
	AcademicPerformanceGood,
	AcademicPerformanceAverage,
	AcademicPerformanceWeak,
	AcademicPerformancePoor,
}

func (e AcademicPerformance) IsValid() bool {
	switch e {
	case AcademicPerformanceExcellent, AcademicPerformanceGood, AcademicPerformanceAverage, AcademicPerformanceWeak, AcademicPerformancePoor:
		return true
	}
	return false
}

func (e AcademicPerformance) String() string {
	return string(e)
}

func (e *AcademicPerformance) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AcademicPerformance(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AcademicPerformance", str)
	}
	return nil
}

func (e AcademicPerformance) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AcademicPerformance) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AcademicPerformance) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Gender string

const (
	GenderMale   Gender = "MALE"
	GenderFemale Gender = "FEMALE"
	GenderOther  Gender = "OTHER"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderOther,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderOther:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Gender) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Gender) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type GradeType string

const (
	GradeTypeOral           GradeType = "ORAL"
	GradeTypeFifteenMinutes GradeType = "FIFTEEN_MINUTES"
	GradeTypeMidterm        GradeType = "MIDTERM"
	GradeTypeFinal          GradeType = "FINAL"
)

var AllGradeType = []GradeType{
	GradeTypeOral,
	GradeTypeFifteenMinutes,
	GradeTypeMidterm,
	GradeTypeFinal,
}

func (e GradeType) IsValid() bool {
	switch e {
	case GradeTypeOral, GradeTypeFifteenMinutes, GradeTypeMidterm, GradeTypeFinal:
		return true
	}
	return false
}

func (e GradeType) String() string {
	return string(e)
}

func (e *GradeType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GradeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GradeType", str)
	}
	return nil
}

func (e GradeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *GradeType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e GradeType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
